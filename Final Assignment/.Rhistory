x = c(6,4,3)
y = c(5,3,7)
z = c(9,3,4)
test = matrix(c(x,y,z), byrow = FALSE, nrow = 3, dimnames = list(c(1,2,3),c('x','y','z')) )
test
x <- c(4,5,1)
barplot(x)
x <- c(4,5,1)
names(x) <- c("1","2","3")
barplot(x)
x <- c(4,5,1)
names(x) <- c("1","2","3")
plot(x)
View(test)
countour(test)
x = c(6,4,3)
y = c(5,3,7)
z = c(9,3,4)
test = matrix(c(x,y,z), byrow = FALSE, nrow = 3, dimnames = list(c(1,2,3),c('x','y','z')) )
contour(test)
persp(test)
persp(test, expand 0.2)
persp(test, expand=0.2)
persp(volcano, expand=0.2)
library(ggplot2)
library(car)
library(rms)
install.packages("rms")
hair_data <- read.table(file.choose(), sep="\t", header=T, comment.char="", quote="")
hair_data <- read.table(file.choose(), sep="\t", header=T, comment.char="", quote="")
head(hair_data)
ggplot(hair_data, aes(Hair_loss, Gender_Bool, col=Gender)) + geom_point()
dd <- datadist(hair_data)
library(rms)
dd <- datadist(hair_data)
options(datadist="dd")
model_1 <- lrm(Gender~Hair_loss, data=hair_data); model_1
Predicted_gender <- predict(model_1)
head(Predicted_gender)
ilogit <- function(x) {1/(1+exp(-x))}
hair_data$Predicted_gender <- ilogit(Predicted_gender)
head(hair_data)
ggplot(hair_data, aes(Hair_loss, Gender_Bool, col=Gender)) + geom_point() + geom_line(aes(Hair_loss, Predicted_gender), colour="Green")
number_of_rows <- dim(hair_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- hair_data[row_number,"Predicted_gender"]
actual_gender <- hair_data[row_number,"Gender"]
if (predicted_prob_of_man > 0.5 & actual_gender == "m") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "f") {
correctness[row_number] <- "correct"
}
}
table(correctness)
voice_data <- read.table(file.choose(), sep="\t", header=T, comment.char="", quote="")
head(voice_data)
ggplot(hair_data, aes(meanfreq, label, col=Gender)) + geom_point()
ggplot(voice_data, aes(meanfreq, label, col=Gender)) + geom_point()
ggplot(voice_data, aes(meanfreq, label, col=label)) + geom_point()
dd <- datadist(voice_data)
options(datadist="dd")
model_2 <- lrm(label~meanfreq, data=voice_data); model_2
dd <- datadist(voice_data)
options(datadist="dd")
model_2 <- lrm(label~meanfreq, data=voice_data); model_2
number_of_rows <- dim(voice_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_label"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "m") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "f") {
correctness[row_number] <- "correct"
}
}
number_of_rows <- dim(voice_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_label"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "male") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "female") {
correctness[row_number] <- "correct"
}
}
predicted_prob_of_man <- voice_data[10,"Predicted_label"];predicted_prob_of_man
predicted_prob_of_man <- voice_data[11,"Predicted_label"];predicted_prob_of_man
Predicted_gender <- predict(model_2)
head(Predicted_gender)
ilogit <- function(x) {1/(1+exp(-x))}
voice_data$Predicted_gender <- ilogit(Predicted_gender)
head(voice_data)
number_of_rows <- dim(voice_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_label"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "male") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "female") {
correctness[row_number] <- "correct"
}
}
correctness <- rep("incorrect",number_of_rows)
correctness <- rep("incorrect",number_of_rows); correctness
Predicted_gender <- predict(model_2)
head(Predicted_gender)
ilogit <- function(x) {1/(1+exp(-x))}
voice_data$Predicted_gender <- ilogit(Predicted_gender)
head(voice_data)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_gender"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "male") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "female") {
correctness[row_number] <- "correct"
}
}
table(correctness)
setwd("~/Documents/RU/Sem2/Statistics/Final Assignment")
library(ggplot2)
library(effects)
library(car)
#random intercepts
library(lme4)
library(lmerTest)
#squaredGLMM
library(MuMIn)
swimming <- read.table("swimming.csv", comment.char="", quote="", header=T, sep="\t")
model_swimming <-lm(Time ~
Shirt + Shirt:Flippers+
Goggles + Goggles:Flippers +
Flippers, data=swimming)
MORE ABOUT INTERACTIONS!!
plot(allEffects(model_swimming))
plot(allEffects(model_swimming))
plot(Effect('Shirt',model_swimming))
plot(Effect('Shirt',model_swimming))
plot(Effect('Goggles',model_swimming))
plot(Effect('Flippers',model_swimming))
plot(allEffects(model_swimming))
reaction_times <- read.table("reaction_times.csv", comment.char="", quote="", header=T, sep="\t")
model_reaction_times <- lm(RT ~ FREQUENCY + FAMILIARITY, data=reaction_times)
plot(allEffects(model_reaction_times))
housing_data <- read.table("housing_data.csv", comment.char="", quote="", header=T, sep="\t")
model_housing_data <- lm(CRIM ~ INDUS + NOX + RM + AGE + DIS + RAD + PTRATIO + B + LSTAT + MEDV +
B:LSTAT + B:INDUS + B:RM + B:AGE + B:DIS + B:RAD +
LSTAT:INDUS + LSTAT:NOX + LSTAT:AGE + LSTAT:DIS + LSTAT:RAD + LSTAT:PTRATIO + LSTAT:MEDV
, data=housing_data)
plot(allEffects(model_housing_data))
plot(Effect('INDUS', model_reaction_times))
plot(Effect('INDUS', model_housing_data))
plot(Effect('INDUS', model_housing_data))
plot(Effect('NOX', model_housing_data))
plot(Effect('RM', model_housing_data))
plot(Effect('AGE', model_housing_data))
plot(Effect('DIS', model_housing_data))
plot(Effect('RAD', model_housing_data))
plot(Effect('PTRATIO', model_housing_data))
plot(Effect('B', model_housing_data))
plot(Effect('LSTAT', model_housing_data))
plot(Effect('MEDV', model_housing_data))
plot(Effect('RM', model_housing_data))
plot(Effect('NOX', model_housing_data))
plot(Effect(c('LSTAT','B'),model_housing_data))
View(housing_data)
plot(Effect(c('LSTAT','INDUS'),model_housing_data))
plot(Effect(c('LSTAT','NOX'),model_housing_data))
'B','INDUS'###############################
'B','INDUS'#########Idiom Experiment
setwd("~/Documents/RU/Sem2/Statistics")
crazy_data <-read.table("crazy_data.csv",sep="\t",header=TRUE,comment.char="",quote="")
crazy_model <- lm(craziness ~ beers_per_week + years_working_at_uni + beers_per_week:years_working_at_uni, data=crazy_data)
plot(allEffects(crazy_model))
xgrid <-  seq(min(crazy_data$beers_per_week), max(crazy_data$beers_per_week), 0.5)
ygrid <-  seq(min(crazy_data$years_working_at_uni), max(crazy_data$years_working_at_uni), 0.5)
all_combos <- expand.grid(beers_per_week=xgrid, years_working_at_uni=ygrid)
predicted_outcomes <- predict(crazy_model, newdata=all_combos)
all_combos$craziness <- predicted_outcomes
head(all_combos)
ggplot(all_combos, aes(x=beers_per_week, y=years_working_at_uni, z=craziness)) + geom_tile(aes(fill = craziness)) + scale_fill_gradient(low="white", high="black") + labs(x="Beers per Week", y="Years Working at University")
xgrid <-  seq(min(housing_data$LSAT), max(crazy_data$LSTAT), 0.5)
ygrid <-  seq(min(crazy_data$B), max(crazy_data$B), 0.5)
xgrid <-  seq(min(crazy_data$beers_per_week), max(crazy_data$beers_per_week), 0.5)
xgrid <-  seq(min(housing_data$LSAT), max(crazy_data$LSTAT), 0.5)
ygrid <-  seq(min(crazy_data$B), max(crazy_data$B), 0.5)
xgrid <-  seq(min(housing_data$LSAT), max(housing_data$LSTAT), 0.5)
ygrid <-  seq(min(housing_data$B), max(housing_data$B), 0.5)
xgrid <-  seq(min(housing_data$LSTAT), max(housing_data$LSTAT), 0.5)
ygrid <-  seq(min(housing_data$B), max(housing_data$B), 0.5)
all_combos <- expand.grid(LSTAT=xgrid, B=ygrid)
head(all_combos)
predicted_outcomes <- predict(housing_data, newdata=all_combos)
predicted_outcomes <- predict(crazy_model, newdata=all_combos)
all_combos$craziness <- predicted_outcomes
head(all_combos)
ggplot(all_combos, aes(x=beers_per_week, y=years_working_at_uni, z=craziness)) + geom_tile(aes(fill = craziness)) + scale_fill_gradient(low="white", high="black") + labs(x="Beers per Week", y="Years Working at University")
crazy_data <-read.table("crazy_data.csv",sep="\t",header=TRUE,comment.char="",quote="")
crazy_model <- lm(craziness ~ beers_per_week + years_working_at_uni + beers_per_week:years_working_at_uni, data=crazy_data)
xgrid <-  seq(min(crazy_data$beers_per_week), max(crazy_data$beers_per_week), 0.5)
ygrid <-  seq(min(crazy_data$years_working_at_uni), max(crazy_data$years_working_at_uni), 0.5)
all_combos <- expand.grid(beers_per_week=xgrid, years_working_at_uni=ygrid)
head(all_combos)
predicted_outcomes <- predict(crazy_model, newdata=all_combos)
xgrid <-  seq(min(housing_data$LSTAT), max(housing_data$LSTAT), 0.5)
ygrid <-  seq(min(housing_data$B), max(housing_data$B), 0.5)
all_combos <- expand.grid(LSTAT=xgrid, B=ygrid)
predicted_outcomes <- predict(housing_data, newdata=all_combos)
predicted_outcomes <- predict(model_housing_data, newdata=all_combos)
predicted_outcomes <- predict(model_housing_data, newdata=all_combos)
all_combos$CRIM <- predicted_outcomes
all_combos <- expand.grid(LSTAT=xgrid, B=ygrid)
predicted_outcomes <- predict(model_housing_data, newdata = all_combos)
ygrid <-  seq(min(housing_data$INDUS), max(housing_data$INDUS), 0.5)
all_combos <- expand.grid(LSTAT=xgrid, INDUS=ygrid)
model_housing_data <- lm(CRIM ~ INDUS + NOX + RM + AGE + DIS + RAD + PTRATIO + B + LSTAT + MEDV +
B:LSTAT + B:INDUS + B:RM + B:AGE + B:DIS + B:RAD +
LSTAT:INDUS + LSTAT:NOX + LSTAT:AGE + LSTAT:DIS + LSTAT:RAD + LSTAT:PTRATIO + LSTAT:MEDV
, data=housing_data)
xgrid <-  seq(min(housing_data$LSTAT), max(housing_data$LSTAT), 0.5)
ygrid <-  seq(min(housing_data$INDUS), max(housing_data$INDUS), 0.5)
all_combos <- expand.grid(LSTAT=xgrid, INDUS=ygrid)
predicted_outcomes <- predict(model_housing_data, newdata = all_combos)
predicted_outcomes <- predict(model_housing_data, newdata = all_combos)
install.packages('scatterplot3d')
library(scatterplot3d)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
install.packages('rgl')
library(rg1)
install.packages('rg1')
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
scatter3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
install.packages(c("rgl", "car"))
install.packages(c("rgl"))
scatter3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
scatter3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$B)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$RAD)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$PTRATIO)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$MEDV)
s3d <- scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
my.lm <- lm(housing_data$CRIM ~ housing_data$CRIM + housing_data$CRIM)
my.lm <- lm(housing_data$CRIM ~ housing_data$LSTAT + housing_data$LSTAT)
s3d <- scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$LSTAT)
my.lm <- lm(housing_data$CRIM ~ housing_data$LSTAT + housing_data$LSTAT)
s3d
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$LSTAT)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$B)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$NOX)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$AGE)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$DIS)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$RAD)
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$PTRATIO)
scatterplot3d(housing_data$CRIM, housing_data$B, housing_data$INDUS)
scatterplot3d(housing_data$CRIM, housing_data$B, housing_data$NOX)
scatterplot3d(housing_data$CRIM, housing_data$B, housing_data$AGE)
scatterplot3d(housing_data$CRIM, housing_data$B, housing_data$DIS)
scatterplot3d(housing_data$CRIM, housing_data$B, housing_data$RAD)
scatterplot3d(housing_data$CRIM, housing_data$B, housing_data$PTRATIO)
scatterplot3d(housing_data$CRIM, housing_data$B, housing_data$MEDV)
idiom_model <- lmer(log_RTs ~ Condition + Condition:Knowledge +
Freqs +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
plot(Effect(c("Condition","Knowledge"), idiom_model))
idiom <- read.table("idiom_lexical_decision.csv", comment.char="", quote="", header=T, sep="\t")
setwd("~/Documents/RU/Sem2/Statistics/Final Assignment")
idiom <- read.table("idiom_lexical_decision.csv", comment.char="", quote="", header=T, sep="\t")
plot(Effect(c("Condition","Knowledge"), idiom_model))
idiom_model <- lmer(log_RTs ~ Condition + Condition:Knowledge +
Freqs +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
plot(Effect(c("Condition","Knowledge"), idiom_model))
plot(Effect(c("Condition"), idiom_model))
plot(Effect(c("Freqs"), idiom_model))
plot(Effect(c("Knowledge"), idiom_model))
plot(Effect("storyType",clause_order_model))
clause_order <- read.table("clause_order_data_CORRECTED.csv", comment.char="", quote="", header=T, sep="\t")
clause_order_model <- lm(normV ~ Exp + Exp:storyType +
bias +
storyType +
age +
sex, data = clause_order)
plot(Effect("bias",clause_order_model))
plot(Effect("Exp",clause_order_model))
plot(Effect(c("storyType","Exp"),clause_order_model))
plot(Effect('INDUS', model_housing_data))
plot(Effect('NOX', model_housing_data))
plot(Effect('INDUS', model_housing_data))
plot(Effect('NOX', model_housing_data))
plot(Effect('RM', model_housing_data))
plot(Effect('AGE', model_housing_data))
plot(Effect('DIS', model_housing_data))
plot(Effect('RAD', model_housing_data))
plot(Effect('PTRATIO', model_housing_data))
plot(Effect('B', model_housing_data))
plot(Effect('LSTAT', model_housing_data))
plot(Effect('LSTAT', model_housing_data))
scatterplot3d(housing_data$CRIM, housing_data$LSTAT, housing_data$INDUS)
