x = c(6,4,3)
y = c(5,3,7)
z = c(9,3,4)
test = matrix(c(x,y,z), byrow = FALSE, nrow = 3, dimnames = list(c(1,2,3),c('x','y','z')) )
test
x <- c(4,5,1)
barplot(x)
x <- c(4,5,1)
names(x) <- c("1","2","3")
barplot(x)
x <- c(4,5,1)
names(x) <- c("1","2","3")
plot(x)
View(test)
countour(test)
x = c(6,4,3)
y = c(5,3,7)
z = c(9,3,4)
test = matrix(c(x,y,z), byrow = FALSE, nrow = 3, dimnames = list(c(1,2,3),c('x','y','z')) )
contour(test)
persp(test)
persp(test, expand 0.2)
persp(test, expand=0.2)
persp(volcano, expand=0.2)
cor(idiom[,c("Familiarity", "Transparency", "MC_Correct")])
library(ggplot2)
library(ggm)
setwd("~/Documents/RU/Sem2/Statistics/Week6")
###1a Load in the data in Idioms.csv.
#This data contains results from a rating study on Dutch idioms.
#Idioms are word sequences like "tegen de lamp lopen" (literally, "walk into the lamp") which have a figurative meaning that is different from the literal one (figuratively, "tegen de lamp lopen" means "to get caught").
#There are 3 measured variables in this study: Familiarity (study participants rated how familiar they were with the figurative meaning of the idioms), MC_Correct (study participants' performance on a multiple-choice test where they had to select the correct figurative meaning of the idiom), and Transparency (study participants rated how related the figurative meaning was the literal meaning of the word sequence).
#"Tegen de lamp lopen" would by a non-transparent idiom, since walking into lamps is not clearly related to getting caught.
#An example of a transparent idiom would be "tussen twee vuren zitten" ("to sit between two fires"), which figuratively means "to be threatened from both sides."
idiom = read.table("Idioms.csv", sep="\t", header=TRUE, comment.char="", quote="")
summary(idiom)
#In this first exercise, analyze the correlations between these 3 variables (don't forget scatterplots).
#You should report the correlation coefficients as well as whether they are statistically significant.
#You should also state how strong the effect is.
nrow(idiom) # 394 datapoints (CENTRAL LIMIT THEOREM)
cor(idiom[,c("Familiarity", "Transparency", "MC_Correct")])
cor(idiom[,c("Familiarity", "Transparency", "MC_Correct")], use = "pairwise.complete.obs")
Familiarity <- idiom$Familiarity
Transparency <- idiom$Transparency
cor.test(Familiarity, Transparency)
ggplot(idiom, aes(Familiarity, Transparency)) + geom_point()
ggplot(idiom, aes(Familiarity, MC_Correct)) + geom_point()
ggplot(idiom, aes(Transparency, MC_Correct)) + geom_point()
cor(idiom[,c("Familiarity", "Transparency", "MC_Correct")], use = "pairwise.complete.obs")^2
idiom_noNAN <- subset(idiom, !(is.na(Familiarity) | is.na(Transparency) | is.na(MC_Correct))
idiom_noNAN <- subset(idiom, !(is.na(Familiarity) | is.na(Transparency) | is.na(MC_Correct)))
idiom_noNAN <- subset(idiom, !(is.na(Familiarity) | is.na(Transparency) | is.na(MC_Correct)))
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom))
idiom_noNAN <- subset(idiom, !(is.na(Familiarity) | is.na(Transparency) | is.na(MC_Correct)))
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN))
idiom_noNAN
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN))
pc2 <- pcor(c("Familiarity", "MC_Correct", "Transparency"), var(idiom_noNAN))
pc3 <- pcor(c("Transparency", "MC_Correct", "Familiarity"), var(idiom_noNAN))
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN)); pc1
nrow(idiom_noNAN)
pcor.test(pc1, 1, 391)
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN)); pc1
pcor.test(pc1, 1, 391)
pc2 <- pcor(c("Familiarity", "MC_Correct", "Transparency"), var(idiom_noNAN)); pc2
pcor.test(pc1, 1, 391)
pc3 <- pcor(c("Transparency", "MC_Correct", "Familiarity"), var(idiom_noNAN)); pc3
pcor.test(pc1, 1, 391)
cor.test(idiom$Transparency, idiom$MC_Correct)
pcor.test(pc1^2, 1, 391)
pcor.test(pc1, 1, 391)
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN)); pc1^2
pcor.test(pc1, 1, 391)
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN)); pc1^2
pcor.test(pc1, 1, 391)
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN)); pc1
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN)); pc1^2
pc2 <- pcor(c("Familiarity", "MC_Correct", "Transparency"), var(idiom_noNAN)); pc2^2
pc3 <- pcor(c("Transparency", "MC_Correct", "Familiarity"), var(idiom_noNAN)); pc3^2
pc2 <- pcor(c("Familiarity", "MC_Correct", "Transparency"), var(idiom_noNAN)); pc2^2
pcor.test(pc2, 1, 391)
pcor.test(pc3, 1, 391)
pc3 <- pcor(c("Transparency", "MC_Correct", "Familiarity"), var(idiom_noNAN)); pc3
pcor.test(pc3, 1, 391)
pc1 <- pcor(c("Familiarity", "Transparency", "MC_Correct"), var(idiom_noNAN)); pc1
pc1 <- pcor(c("Transparency", "Familiarity", "MC_Correct"), var(idiom_noNAN)); pc1
pcor.test(pc1, 1, 391)
pc1 <- pcor(c("Transparency", "Familiarity", "MC_Correct"), var(idiom_noNAN), alternative = "greater"); pc1
singing = read.table("singing.csv", sep="\t", header=TRUE, comment.char="", quote="")
summary(singing)
head(singing)
nrow(singing)
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point()
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F)
?geom_smooth
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F)
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labels(x = "Place in competition")
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Place in competition")
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Place in competition", y = "Original song likes on YouTube")
cor.test(singing$Place, singing$YouTube_Song_Likes, method = "spearman")
cor.test(singing$Place, singing$YouTube_Song_Likes, method = "kendall")
cor.test(singing$Place, singing$YouTube_Song_Likes, method = "kendall")
singing <- sort(singing)
singing <- sort(singing$Place)
singing
singing = read.table("singing.csv", sep="\t", header=TRUE, comment.char="", quote="")
singing <- singing[!singing$Place == 1, ]
singing
singing <- singing[!singing$Place == 1 | !singing$Place == 2, ]
singing
singing <- singing[!singing$Place == 1 && !singing$Place == 2, ]
singing
singing
singing <- singing[!singing$Place == 1 | 12, ]
singing
singing <- singing[!singing$Place == 12, ]
singing
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Place in competition", y = "Original song likes on YouTube")
cor.test(singing$Place, singing$YouTube_Song_Likes, method = "spearman")
#There appears to be a correlation between Place and YouTube_Song_likes of rho = -0.13
cor.test(singing$Place, singing$YouTube_Song_Likes, method = "kendall")
#There appears to be a correlation between Place and YouTube_Song_likes of tau = -0.27
ggplot(singing, aes(Place, YouTube_Song_Likes)) + geom_point() + geom_smooth(method = "lm", colour = "Red", se = F) + labs(x = "Place in competition", y = "Original song likes on YouTube")
cor.test(singing$Place, singing$YouTube_Song_Likes, method = "spearman")
cor.test(singing$Place, singing$YouTube_Song_Likes, method = "kendall")
