x = c(6,4,3)
y = c(5,3,7)
z = c(9,3,4)
test = matrix(c(x,y,z), byrow = FALSE, nrow = 3, dimnames = list(c(1,2,3),c('x','y','z')) )
test
x <- c(4,5,1)
barplot(x)
x <- c(4,5,1)
names(x) <- c("1","2","3")
barplot(x)
x <- c(4,5,1)
names(x) <- c("1","2","3")
plot(x)
View(test)
countour(test)
x = c(6,4,3)
y = c(5,3,7)
z = c(9,3,4)
test = matrix(c(x,y,z), byrow = FALSE, nrow = 3, dimnames = list(c(1,2,3),c('x','y','z')) )
contour(test)
persp(test)
persp(test, expand 0.2)
persp(test, expand=0.2)
persp(volcano, expand=0.2)
library(ggplot2)
library(car)
library(rms)
install.packages("rms")
hair_data <- read.table(file.choose(), sep="\t", header=T, comment.char="", quote="")
hair_data <- read.table(file.choose(), sep="\t", header=T, comment.char="", quote="")
head(hair_data)
ggplot(hair_data, aes(Hair_loss, Gender_Bool, col=Gender)) + geom_point()
dd <- datadist(hair_data)
library(rms)
dd <- datadist(hair_data)
options(datadist="dd")
model_1 <- lrm(Gender~Hair_loss, data=hair_data); model_1
Predicted_gender <- predict(model_1)
head(Predicted_gender)
ilogit <- function(x) {1/(1+exp(-x))}
hair_data$Predicted_gender <- ilogit(Predicted_gender)
head(hair_data)
ggplot(hair_data, aes(Hair_loss, Gender_Bool, col=Gender)) + geom_point() + geom_line(aes(Hair_loss, Predicted_gender), colour="Green")
number_of_rows <- dim(hair_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- hair_data[row_number,"Predicted_gender"]
actual_gender <- hair_data[row_number,"Gender"]
if (predicted_prob_of_man > 0.5 & actual_gender == "m") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "f") {
correctness[row_number] <- "correct"
}
}
table(correctness)
voice_data <- read.table(file.choose(), sep="\t", header=T, comment.char="", quote="")
head(voice_data)
ggplot(hair_data, aes(meanfreq, label, col=Gender)) + geom_point()
ggplot(voice_data, aes(meanfreq, label, col=Gender)) + geom_point()
ggplot(voice_data, aes(meanfreq, label, col=label)) + geom_point()
dd <- datadist(voice_data)
options(datadist="dd")
model_2 <- lrm(label~meanfreq, data=voice_data); model_2
dd <- datadist(voice_data)
options(datadist="dd")
model_2 <- lrm(label~meanfreq, data=voice_data); model_2
number_of_rows <- dim(voice_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_label"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "m") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "f") {
correctness[row_number] <- "correct"
}
}
number_of_rows <- dim(voice_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_label"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "male") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "female") {
correctness[row_number] <- "correct"
}
}
predicted_prob_of_man <- voice_data[10,"Predicted_label"];predicted_prob_of_man
predicted_prob_of_man <- voice_data[11,"Predicted_label"];predicted_prob_of_man
Predicted_gender <- predict(model_2)
head(Predicted_gender)
ilogit <- function(x) {1/(1+exp(-x))}
voice_data$Predicted_gender <- ilogit(Predicted_gender)
head(voice_data)
number_of_rows <- dim(voice_data)[1]; number_of_rows
correctness <- rep("incorrect",number_of_rows)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_label"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "male") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "female") {
correctness[row_number] <- "correct"
}
}
correctness <- rep("incorrect",number_of_rows)
correctness <- rep("incorrect",number_of_rows); correctness
Predicted_gender <- predict(model_2)
head(Predicted_gender)
ilogit <- function(x) {1/(1+exp(-x))}
voice_data$Predicted_gender <- ilogit(Predicted_gender)
head(voice_data)
for (row_number in seq(number_of_rows)) {
predicted_prob_of_man <- voice_data[row_number,"Predicted_gender"]
actual_gender <- voice_data[row_number,"label"]
if (predicted_prob_of_man > 0.5 & actual_gender == "male") {
correctness[row_number] <- "correct"
} else if (predicted_prob_of_man < 0.5 & actual_gender == "female") {
correctness[row_number] <- "correct"
}
}
table(correctness)
model_reaction_times <- lm(RT ~ FREQUENCY + FAMILIARITY + IMAGEABILITY
+ FREQUENCY:FAMILIARITY
+ FREQUENCY:IMAGEABILITY
+ FAMILIARITY:IMAGEABILITY
+ FREQUENCY:FAMILIARITY:IMAGEABILITY, data=reaction_times)
reaction_times <- read.table("reaction_times.csv", comment.char="", quote="", header=T, sep="\t")
setwd("~/Documents/RU/Sem2/Statistics/Final Assignment")
reaction_times <- read.table("reaction_times.csv", comment.char="", quote="", header=T, sep="\t")
model_reaction_times <- lm(RT ~ FREQUENCY + FAMILIARITY + IMAGEABILITY
+ FREQUENCY:FAMILIARITY
+ FREQUENCY:IMAGEABILITY
+ FAMILIARITY:IMAGEABILITY
+ FREQUENCY:FAMILIARITY:IMAGEABILITY, data=reaction_times)
summary(model_reaction_times)
model_reaction_times <- lm(RT ~ FREQUENCY*FAMILIARITY*IMAGEABILITY
, data=reaction_times)
summary(model_reaction_times)
model_reaction_times <- lm(RT ~ FREQUENCY:FAMILIARITY:IMAGEABILITY
, data=reaction_times)
summary(model_reaction_times)
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:LP + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
library(ggplot2)
library(effects)
library(car)
#random intercepts
library(lme4)
library(lmerTest)
idiom <- read.table("idiom_lexical_decision.csv", comment.char="", quote="", header=T, sep="\t")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:LP + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
summary(idiom_model)
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:LP + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge, data = idiom)
idiom_model <- lm(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:LP + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge, data = idiom)
summary(idiom_model)
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:LP + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
summary(idiom_model)
drop1(idiom_model, test = "F")
drop1(idiom_model, test = "Chisq",)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
clause_order <- read.table("clause_order_data_CORRECTED.csv", comment.char="", quote="", header=T, sep="\t")
View(clause_order)
clause_order <- clause_order[clause_order$person == "WJ",]
clause_order <- clause_order[clause_order$situation == "burglary" | clause_order$situation == "PSA",]
clause_order <- data.frame(clause_order[c(1,11,12, 14, 15, 16)])
clause_order <- data.frame(clause_order[c(1,10,11,12,13,14)])
head(clause_order)
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:LP + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
summary(idiom_model)
drop1(idiom_model, test = "Chisq")
View(reaction_times)
View(idiom)
PressureData <- read.table("BloodPressure.csv", sep="\t", header=T, comment.char="", quote="")
head(PressureData)
setwd("~/Documents/RU/Sem2/Statistics")
PressureData <- read.table("BloodPressure.csv", sep="\t", header=T, comment.char="", quote="")
summary(lm(BloodPressure~Hour, data=PressureData))
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:LP + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
summary(idiom_model)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency + Freqs:Knowledge +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Freqs + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency +
LP + LP:Transparency + LP:Knowledge +
Transparency +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency +
LP + LP:Transparency + LP:Knowledge +
Transparency + Transparency:Knowledge +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:LP + Condition:Transparency + Condition:Knowledge +
Freqs + Freqs:Transparency +
LP + LP:Transparency + LP:Knowledge +
Transparency +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:LP + Condition:Knowledge +
Freqs + Freqs:Transparency +
LP + LP:Transparency + LP:Knowledge +
Transparency +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:LP + Condition:Knowledge +
Freqs +
LP + LP:Transparency + LP:Knowledge +
Transparency +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:LP + Condition:Knowledge +
Freqs +
LP + LP:Transparency +
Transparency +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:LP + Condition:Knowledge +
Freqs +
LP +
Transparency +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:LP + Condition:Knowledge +
Freqs +
LP +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Knowledge +
Freqs +
LP +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
idiom_model <- lmer(log_RTs ~ Condition + Condition:Knowledge +
Freqs +
Knowledge +
(1|Subject)+
(1|Idiom), data = idiom)
drop1(idiom_model, test = "Chisq")
durbinWatsonTest(idiom_model)
sum(rstandard(idiom_model) > 3.29) #6
plot(allEffects(idiom_model))
